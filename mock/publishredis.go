// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/publishredis/publishredis.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	v8 "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedisPubSub is a mock of RedisPubSub interface
type MockRedisPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockRedisPubSubMockRecorder
}

// MockRedisPubSubMockRecorder is the mock recorder for MockRedisPubSub
type MockRedisPubSubMockRecorder struct {
	mock *MockRedisPubSub
}

// NewMockRedisPubSub creates a new mock instance
func NewMockRedisPubSub(ctrl *gomock.Controller) *MockRedisPubSub {
	mock := &MockRedisPubSub{ctrl: ctrl}
	mock.recorder = &MockRedisPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisPubSub) EXPECT() *MockRedisPubSubMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockRedisPubSub) Publish(ctx context.Context, channel string, message interface{}) *v8.IntCmd {
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(*v8.IntCmd)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockRedisPubSubMockRecorder) Publish(ctx, channel, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRedisPubSub)(nil).Publish), ctx, channel, message)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/publishamqp/publishamqp.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// MockAMQPPublisher is a mock of AMQPPublisher interface
type MockAMQPPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPPublisherMockRecorder
}

// MockAMQPPublisherMockRecorder is the mock recorder for MockAMQPPublisher
type MockAMQPPublisherMockRecorder struct {
	mock *MockAMQPPublisher
}

// NewMockAMQPPublisher creates a new mock instance
func NewMockAMQPPublisher(ctrl *gomock.Controller) *MockAMQPPublisher {
	mock := &MockAMQPPublisher{ctrl: ctrl}
	mock.recorder = &MockAMQPPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAMQPPublisher) EXPECT() *MockAMQPPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockAMQPPublisher) Publish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockAMQPPublisherMockRecorder) Publish(exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAMQPPublisher)(nil).Publish), exchange, key, mandatory, immediate, msg)
}

// NotifyReturn mocks base method
func (m *MockAMQPPublisher) NotifyReturn(c chan amqp.Return) chan amqp.Return {
	ret := m.ctrl.Call(m, "NotifyReturn", c)
	ret0, _ := ret[0].(chan amqp.Return)
	return ret0
}

// NotifyReturn indicates an expected call of NotifyReturn
func (mr *MockAMQPPublisherMockRecorder) NotifyReturn(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyReturn", reflect.TypeOf((*MockAMQPPublisher)(nil).NotifyReturn), c)
}
